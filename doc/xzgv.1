.\" *** Auto-generated by makeman, *edits will be lost*! ***
.\"
.\"
.TH XZGV 1 "16th September 2003" "Version 0.8" "Graphics Software"
.SH NAME
xzgv \- picture viewer for X, with thumbnail-based file selector
.\"
.SH SYNOPSIS
xzgv [\fIoptions\fR] [\fIdir\fR | \fIfile\fR ...]
.SH "DESCRIPTION"
(NB: This man page is automagically generated from xzgv's
texinfo file, and so may look a bit odd.
We apologise for the inconvenience. :-))
.PP
xzgv is a picture viewer for X, with a thumbnail-based file selector.
The thumbnails used (thumbnails being small `preview' versions of the
pictures) are compatible with xv, zgv, and the Gimp. The kinds of
pictures xzgv allows to be viewed are raster-format pictures (sometimes
called `bitmaps' and/or `pixmaps'); things like GIF files, JPEG files,
PNG files, and so on. (Details of file formats supported are given
elsewhere. See \fBSupported File Formats\fR.)
.PP
Most of the time, you will probably want to use xzgv's file selector
(see \fBThe File Selector\fR) to pick which file(s) to view. This is what
appears on the left-hand side of the window when you start xzgv as just
`\fBxzgv\fR' (see \fBOptions\fR). It displays a list of
subdirectories and picture files in the current directory, along with
small `thumbnail' versions of the pictures if they exist. (If no
thumbnails appear in a given directory, or if they are missing for some
files, you can create/update them by pressing `\fBu\fR'. See \fBUpdating
Thumbnails\fR.)
.PP
When you've picked a file to view, you can view it by clicking on it, or
pressing `\fBEnter\fR' or `\fBSpace\fR'. This reads the picture and displays
it in the right-hand part of the window, the viewer (see \fBThe
Viewer\fR). You can then move around the picture (if it is larger than
will fit) by dragging it with the mouse, or using the scrollbars, or the
cursor keys. You can then select another image with the file selector
(though you need to press `\fBEsc\fR' or `\fBTab\fR' first if using the
keyboard), or you can quit xzgv by pressing `\fBq\fR'.
.PP
While xzgv works much like any other X program, and is certainly
mouse-friendly :-), it's also designed to be keyboard-friendly.
Everything in xzgv can be done entirely from the keyboard. Much of this
keyboard support works like the original zgv (a similar console-based
picture viewer for Linux).
.PP
This overview is, as you might expect, only the very simplest of
introductions to what xzgv can do, and describes only a very basic use of
xzgv. xzgv can do a lot more; read on to find out what.
.PP
.SH "ACKNOWLEDGEMENTS"
xzgv was primarily written by Russell Marks, also the author of this
manual.
.PP
Costa Sapuntzakis contributed code for much faster JPEG thumbnail
generation (to zgv, which I adapted for xzgv).
.PP
`\fBinstall-info\fR' is a (very) slightly modified version of the
original (which is part of the `\fBtexinfo\fR' package). This program is
used during installation. I think it was mostly written by Karl Berry,
but it's not terribly clear.
.PP
The directory/file icons used were loosely based on gmc's
\fIdir-close.xpm\fR. I think Tuomas Kuosmanen was responsible for
that, judging from the change log.
.PP
`\fBmkinstalldirs\fR' is straight from the `\fBtexinfo\fR' package, and
was written by Noah Friedman. (This is also used during installation.)
.PP
Huge thanks go to the many people responsible for GTK+, without which
xzgv would almost certainly not have happened. Thanks also to the
Rasterman (Carsten Haiztler) for Imlib, without which xzgv would most
likely have been a complete pain to write. (But no thanks for Electric
Eyes, which was nearly nice enough for me not to bother with xzgv at
all! :-))
.PP
This program is based in part on the work of the Independent JPEG
Group. (I don't think I actually need this line any more, but I like
giving these guys a credit, it's a neat library. :-))
.PP
xzgv uses (or rather it does if `\fBINTERP_MMX\fR' was defined when
compiling, and if it's running on an MMX-capable CPU) MMX instructions
for interpolation, with the help of libmmx, by Hank Dietz and Randy
Fisher.
.PP
\fIgetopt*.[ch]\fR are from the GNU libc.
.PP
``The Graphics Interchange Format(c) is the Copyright property of
CompuServe Incorporated. GIF(sm) is a Service Mark property of
CompuServe Incorporated.''
.PP
.SH "OPTIONS"
Normally you'd invoke xzgv as plain `\fBxzgv\fR' (perhaps via a window
manager menu, or GNOME/KDE menu, etc.). However, you can directly
specify files to view, or a start directory, on the command-line. In
addition, there are various options.
.PP
(If you're new to xzgv, you should probably skip the rest of this section
for now and come back to it later.)
.PP
The general format of the xzgv command-line goes roughly like this:
.PP
xzgv [\fIoptions\fR] [\fIdir\fR | \fIfile\fR ...]
.br
.PP
Two types of options are supported --- the traditional Unix
single-letter options, and GNU-style long options. Most options can be
used in either way, and both forms are listed in the table below.
.PP
Note that all options are processed after any configuration file(s).
Config file settings are just like the long-option names below minus the
`\fB--\fR' (see \fBConfiguring xzgv\fR), though a few command-line options
are not permitted as config file settings (e.g. `\fBhelp\fR'), and vice
versa.
.PP
Here's what the options do:
.PP
`\fB-a\fR'
.RS
.RE
`\fB--auto-hide\fR'
.RS
Automatically hide selector when a picture is selected, allowing the
viewer to use the whole window.
.PP
.RE
`\fB--careful-jpeg\fR'
.RS
Enable libjpeg `fancy upsampling'. xzgv defaults to using the faster
method; as the libjpeg documentation puts it, ``The visual impact of the
sloppier method is often very small.''
.PP
.RE
`\fB--delete-single-prompt\fR'
.RS
(Note that this is normally enabled; use
`\fB--delete-single-prompt=off\fR' to disable it.) If \fIdisabled\fR,
xzgv will immediately delete a file when told to, without prompting for
confirmation. (It's `\fBsingle\fR' because deleting multiple files at
once will be supported in future, and that will have a separate prompt
override.)
.PP
.RE
`\fB--dither-hicol\fR'
.RS
Use dithering in 15/16-bit, whatever Imlib's default setting is.
See \fBViewer Options\fR, for a discussion of benefits/drawbacks. You can
also use `\fB--dither-hicol=off\fR' to disable this if Imlib normally has
it enabled.
.PP
.RE
`\fB--exif-orient\fR'
.RS
In JPEG files, use Exif orientation tags (inserted by e.g. digital
cameras) to correct image orientation before display. See \fBViewer
Options\fR, for details.
.PP
.RE
`\fB--fast-recursive-update\fR'
.RS
When doing a recursive thumbnail update, don't read existing thumbnails
before updating. This is pretty much obsolete as of xzgv 0.7, as the
speed increase is now negligible. But, it may still be useful if you
want to update a \fIhuge\fR number of small directories for which few
if any updates are needed.
.PP
.RE
`\fB-f\fR'
.RS
.RE
`\fB--fullscreen\fR'
.RS
Run fullscreen, using the entire screen for xzgv's window, without even
any window-manager decorations (window frame, title bar, etc.) if
possible.
.PP
.RE
`\fB-G \fIval\fR\fR'
.RS
.RE
`\fB--gamma \fIval\fR\fR'
.RS
Set the gamma adjustment used (see \fBGamma Adjustment\fR). The default is
1.0. This also sets the `initial value' used when resetting the gamma
adjustment.
.PP
.RE
`\fB-g \fIgeom\fR\fR'
.RS
.RE
`\fB--geometry \fIgeom\fR\fR'
.RS
Set the xzgv window's geometry (position and/or size) to \fIgeom\fR. The
geometry string should be in the usual X format, with the extension that
positions/sizes may have a `\fB%\fR' suffix meaning that they are treated
as percentages of the screen width/height. The default geometry is
`\fB92%x85%\fR'.
.PP
For those unfamiliar with the way `geometry' works, here's a brief
description of the syntax. It's `\fBWxH\fR', or `\fB+X+Y\fR', or
`\fBWxH+X+Y\fR', where `\fBW\fR' is width, `\fBH\fR' height, `\fBX\fR' the x
position, and `\fBY\fR' the y position. The first form specifies only the
size, the second only the position --- the `\fBWxH+X+Y\fR' form specifies
both.
.PP
Now, the `\fB+X+Y\fR' bit normally specifies where the top-left of the
window is. But you can use `\fB-\fR' instead of `\fB+\fR' for the x and/or
y position, in which case it specifies the gap between the right/bottom
of the window and the right/bottom of the screen. (Note, however, that
any window frame your window manager adds to the window is disregarded
in this calculation, so you may need to experiment somewhat to get the
desired position.) You can also use negative numbers with both `\fB+\fR'
and `\fB-\fR' --- so `\fB+-50+0\fR' puts the window partly off the left of
the screen, and `\fB+0--50\fR' puts it partly off the bottom of the
screen --- but this is of questionable value. :-)
.PP
Finally, as mentioned above, xzgv extends this syntax by allowing you to
use `\fB%\fR' to specify percentages of the screen width/height rather
than pixels, e.g. `\fB50%x30%-30%-20%\fR'. It also allows you to use real
numbers such as `\fB12.34\fR', which can be useful with `\fB%\fR'.
.PP
.RE
`\fB-h\fR'
.RS
.RE
`\fB--help\fR'
.RS
Display a list of options and a terse description of what the options
do.
.PP
.RE
`\fB--image-bigness-threshold \fInumpix\fR\fR'
.RS
Set the boundary \fInumpix\fR after which images are considered `big',
and are no longer rendered all-at-once (which gives much nicer
scrolling, but is harder on memory and can be slow for big images) but
are instead rendered piece-by-piece. Units are number of pixels in image
(i.e. width times height), and the default is 2000000 pixels.
.PP
.RE
`\fB--interpolate\fR'
.RS
Interpolate between the picture's pixels when scaling up
(see \fBScaling\fR). This usually looks nicer, but it's rather slow.
.PP
.RE
`\fB--mouse-scale-x\fR'
.RS
If enabled, control-clicking on the viewer scales only the X axis. (The
default is to scale only the Y axis.)
.PP
.RE
`\fB--revert-orient\fR'
.RS
(Note that this is normally enabled; use `\fB--revert-orient=off\fR' to
disable it.) If \fIdisabled\fR, orientation (flip/mirror/rotate) state
is retained between pictures (see \fBViewer Options\fR).
.PP
.RE
`\fB--revert-scale\fR'
.RS
(Note that this is normally enabled; use `\fB--revert-scale=off\fR' to
disable it.) If \fIdisabled\fR, scaling is retained between pictures
(see \fBViewer Options\fR).
.PP
.RE
`\fB--selector-width\fR'
.RS
Set the default/initial size of the selector in pixels. The normal
setting is 200.
.PP
.RE
`\fB-T\fR'
.RS
.RE
`\fB--show-tagged\fR'
.RS
Show names of currently-tagged files on exiting xzgv. (They're listed to
stdout, one per line.) This can be useful when you want to select
multiple files graphically and work on them with something else.
.PP
.RE
`\fB--show-thumbnail-messages\fR'
.RS
Show on the status bar when thumbnails are being read. The status bar
must be enabled for these messages to be visible, of course. :-)
.PP
.RE
`\fB-k\fR'
.RS
.RE
`\fB--skip-parent\fR'
.RS
For the first directory shown, skip the cursor past \fI..\fR (the
parent dir). This can be useful when you'd like to immediately use space
to `page' through the dir.
.PP
.RE
`\fB-o \fIorder\fR\fR'
.RS
.RE
`\fB--sort-order \fIorder\fR\fR'
.RS
Set the initial sorting order used in the selector. Possible settings
are `\fBname\fR', `\fBext\fR', `\fBsize\fR', and `\fBdate\fR' (or
`\fBtime\fR'); only the first char of the setting
(`\fBn\fR'/`\fBe\fR'/`\fBs\fR'/`\fBd\fR'/`\fBt\fR') need be given. The
default is name order.
.PP
.RE
`\fB--sort-timestamp-type \fItype\fR\fR'
.RS
Set the timestamp type to use when using time/date sorting order.
Possible settings are `mtime' (default), `ctime', and `atime'; only the
first char of the setting (`\fBm\fR'/`\fBc\fR'/`\fBa\fR') need be given.
.PP
.RE
`\fB--statusbar\fR'
.RS
Show a status bar below the selector; this, for example, says when a
picture is being read.
.PP
.RE
`\fB-t\fR'
.RS
.RE
`\fB--thin-rows\fR'
.RS
Use rows a third the normal height in the selector. This can be very
useful on lower-resolution screens, or if you're really interested in
filenames, not thumbnails.
.PP
.RE
`\fB-v\fR'
.RS
.RE
`\fB--version\fR'
.RS
Show version number.
.PP
.RE
`\fB--version-gtk\fR'
.RS
Show version number of GTK+ xzgv is using.
.PP
.RE
`\fB-z\fR'
.RS
.RE
`\fB--zoom\fR'
.RS
Fit picture to viewer window, whatever its actual size (see \fBZoom
Mode\fR).
.PP
.RE
`\fB-r\fR'
.RS
.RE
`\fB--zoom-reduce-only\fR'
.RS
When in zoom mode, only \fIreduce\fR pictures to fit; i.e. make big
pictures viewable all-at-once while leaving small picures intact.
.RE
.PP
If started with `\fBxzgv \fIfiles\fR\fR', xzgv hides the file selector
and treats the file or files as if they were the sole contents of a
directory. (It also automatically loads the first file.) As such, you
can use the Next Image and Previous Image commands to navigate between
the images, or do Exit to Selector and use the selector directly. (By
the way, running like this also makes it possible to view files without
the usual extensions such as \fI.gif\fR, etc. See \fBFile Type
Identification\fR.)
.PP
If started with `\fBxzgv \fIstart-dir\fR\fR', xzgv starts up as usual,
but with the selector starting on the directory specified (rather than
the current directory).
.PP
Settings which are either on or off (boolean) are, as you might expect,
enabled by using e.g. `\fB-z\fR' or `\fB--zoom\fR'. However, there's an
alternative long-option form for setting these, resembling how they're
set in config files --- the syntax is `\fB--option=\fIstate\fR\fR', where
\fIstate\fR is `\fBon\fR'/`\fBy\fR'/`\fByes\fR'/`\fB1\fR' to enable the
option, or `\fBoff\fR'/`\fBn\fR'/`\fBno\fR'/`\fB0\fR' to disable it. The
most useful thing about this is that it allows you to disable options
which were previously enabled, by using e.g. `\fB--zoom=off\fR'.
.PP
(Readers used to the way GNU-style long options work should note that,
since this `\fBon\fR'/`\fBoff\fR'/etc. arg is optional, you can't use the
`\fB--option arg\fR' form in this case; it must be `\fB--option=arg\fR'
for it to work.)
.PP
.SH "A NOTE ON NOTATION"
Much of this manual is taken up by a description of xzgv's various
commands in its file selector and viewer. Most of these are available
both from the keyboard, and from popup menus. (A popup menu appears when
you press `\fBF10\fR' or `\fBMenu\fR', or right-click on the selector or the
viewer; each has its own menu.) So in the manual, you will often see
things rather like this:
.PP
`\fBkey\fR'
.RS
.RE
`\fBSelector menu, Menu the item is in, Menu item\fR'
.RS
Description of what the key/menu item does.
.RE
.PP
Sometimes the key given has a `\fB(Selector)\fR' or `\fB(Viewer)\fR' suffix;
this is because some keypresses in xzgv are specific to the selector or
the viewer, and won't work unless the relevant part of xzgv has the
keyboard focus.
.PP
.SH "THE FILE SELECTOR"
Usually, on starting up xzgv, you'll want to use the file selector ---
the list of files on the left. (The other subwindow (on the right) is
the viewer.) The selector lets you pick files to view (among other
things). It lists the subdirectories and picture files in the current
directory, along with small `thumbnail' versions of the pictures if they
exist.
.PP
.SH "THE SELECTOR MENU"
Almost all selector commands are available from the selector's pop-up
menu, which appears when you right-click anywhere on the selector. (You
can also press `\fBF10\fR' or `\fBMenu\fR' to bring up the menu, but as
there are keyboard shortcuts for just about everything in xzgv, this
isn't often that useful. :-))
.PP
Usually, it doesn't matter where on the selector you right-click.
However, a few commands on the \fIFile\fR menu operate on a single
file, the one selected by the keyboard cursor. A problem when using the
mouse, you might think --- but when you right-click on the selector, as
well as popping up the menu, xzgv moves this cursor to the file you
right-clicked on (if any). (You can see this by the way a hollow box is
drawn around the file.) So to use e.g. \fIDetails\fR on the \fIFile\fR
menu, you need to right-click \fIon the file you want details on\fR.
.PP
Both the selector and viewer have `Help' menus, most items of which
refer you to this manual:
.PP
`\fBF1\fR'
.RS
.RE
`\fBSelector menu, Help, Contents\fR'
.RS
.RE
`\fBViewer menu, Help, Contents\fR'
.RS
View the manual's overall contents.
.PP
.RE
`\fBSelector menu, Help, The File Selector\fR'
.RS
View the manual's section on the file selector.
.PP
.RE
`\fBViewer menu, Help, The Viewer\fR'
.RS
View the manual's section on the viewer.
.PP
.RE
`\fBSelector menu, Help, Index\fR'
.RS
.RE
`\fBViewer menu, Help, Index\fR'
.RS
View the manual's concept index.
.PP
.RE
`\fBSelector menu, Help, About\fR'
.RS
.RE
`\fBViewer menu, Help, About\fR'
.RS
Give some brief information about xzgv, including the version number and
homepage.
.RE
.PP
Currently, the way xzgv lets you read the manual is a bit crude; it runs
the `\fBinfo\fR' program (see \fBTop\fR in the \fIinfo-stnd\fR info file) in an `\fBxterm\fR'.
.PP
.SH "EXITING XZGV"
You can exit xzgv either by using one of two exit keypresses, or by
selecting the appropriate option from the selector's popup menu:
.PP
`\fBq\fR'
.RS
.RE
`\fBCtrl-q\fR'
.RS
.RE
`\fBSelector menu, Exit xzgv\fR'
.RS
Quit xzgv.
.PP
.RE
.PP
(There's also an exit option on the selector's \fIFile\fR menu
(`\fBSelector menu, File, Exit\fR'), as `Exit' is generally on any File
menu.)
.PP
.SH "THUMBNAILS"
(This section is deliberately early on in the manual, as thumbnails are
probably the most important feature of the file selector, so it's best
that you know how to create/update them sooner rather than later.)
.PP
Thumbnails are small versions of the pictures they represent, and are
displayed by the file selector if they exist. xzgv uses xv-compatible
thumbnails --- if you create thumbnails with xv they will work with xzgv,
and vice versa. xzgv's thumbnails are also compatible with the Gimp, and
zgv.
.PP
If no thumbnail exists for a file, a small `document' icon appears
instead (similar to the `folder' icon used for directories).
.PP
.SS "Updating Thumbnails"
While thumbnails can be made relatively quickly, it's by no means an
instant process. For this reason, thumbnails have to be created in
advance, and are stored as files in their own right in a subdirectory
.cc @
\fI.xvpics\fR.
@cc .
.PP
xzgv never creates/updates thumbnails without you telling it to. So, if
you enter a directory where the picture files don't have any thumbnails,
or where the thumbnails seem to be out of date, you should press
`\fBu\fR', or select \fIUpdate Thumbnails\fR from the selector's menu.
(Even if the thumbnails can't be written (say, if you don't have
permission to write them), the selector will still show the updated
thumbnails until you leave the directory.)
.PP
Alternatively, you can create/update thumbnails for the current
directory and all subdirectories by using `\fBAlt-u\fR' or \fIRecursive
Update\fR. But be warned that a recursive update can take some time!
.PP
`\fBu\fR'
.RS
.RE
`\fBSelector menu, Update Thumbnails\fR'
.RS
Create thumbnails for any files which don't have them, and update
thumbnails which are older than the corresponding file. While this is
going on, a window appears showing how far through the process xzgv is.
.PP
While the update is in progress, you can abort it by clicking on the
\fICancel\fR button, or pressing `\fBEsc\fR' or `\fBEnter\fR', or by
clicking the delete-window button (if your window manager provides one)
on the title bar. xzgv will stop once it has finished the thumbnail it
is currently working on (if any).
.PP
.RE
`\fBAlt-u\fR'
.RS
.RE
`\fBSelector menu, Recursive Update\fR'
.RS
Create/update thumbnails for all files in the current directory and all
subdirectories. This can take some time, so you are prompted to confirm
you really want to do this (see \fBDialog Boxes\fR). Progress is indicated
in much the same way as for a normal update, but only for the directory
currently being updated --- the overall progress is not indicated, other
than by the current dir being (as ever) displayed in the main window's
title. You can abort a recursive thumbnail update in the same ways as
for a normal update (see above).
.PP
By default, xzgv behaves a little oddly when doing a recursive update,
to give some consistency with the normal update. See \fBThumbnail
Issues\fR, for details.
.PP
.RE
.PP
.SS "Thumbnail Issues"
Dealing with thumbnails can be `interesting' at times, and there are a
few ways this influences things:
.PP
\fB-\fR 
xzgv doesn't read the thumbnails in a directory all at once. Instead, it
just reads the directory contents, then starts up what is effectively a
kind of background task to read in the thumbnails. So xzgv may not be
quite as responsive as usual for a short time after entering a directory
with many thumbnails (say, a few hundred) --- but on the other hand, at
least it \fIis\fR responding. :-)
.PP
\fB-\fR 
The `background task' makes a special effort to show thumbnails for the
files currently visible in the selector first, no matter how much you
move around the list, but it reads them all in eventually.
.PP
\fB-\fR 
The thumbnails used in xzgv require 256 colours to display. This can be
a problem if you're running X in 256 colours or less as, even if you're
running an 8-bit (256 colour) server, there will almost inevitably be
fewer colours available. Currently, xzgv just uses whatever Imlib
reports as the closest match to each individual colour used in
thumbnails. This gives a tolerable result on 8-bit servers, assuming
Imlib was able to allocate a large number of colours; however, it gives
terrible results if it couldn't, or if running on 4-bit or 1-bit
servers. Sorry about this --- it should be fixed in future (either by
using Imlib to draw the thumbnail pixmaps, or by dithering them `by
hand' to suit the colours available).
.PP
\fB-\fR 
Finally, when doing a recursive thumbnail update, xzgv (by default)
reads existing thumbnails in a directory before updating any. Or rather,
it reads thumbnails for those files currently visible in the selector.
This can slow things down very slightly, but keeps the `look and feel'
consistent with the normal update. (Still, you can disable this with the
`\fB--fast-recursive-update\fR' command-line option (see \fBInvoking
xzgv\fR) or equivalent config file entry (see \fBConfiguring xzgv\fR).)
.RE
.PP
.SH "SELECTOR LAYOUT AND RESIZING"
The file selector is simply a list of subdirectories and filenames,
along with any thumbnails that exist for them. The list is normally in
asciibetical order (but you can change this; see \fBChanging the Sorting
Order\fR). Names of directories are shown first, and they are shown in
order at the beginning of the list, before all the picture files. Long
filenames may not fit in the visible part of the file selector display;
if so, there will be a horizontal scrollbar you can use to see the rest
of the name(s) (you can use cursor left/right to do this from the
keyboard).
.PP
The list is very often larger than can fit on the screen at once. If
this is the case, only part is shown at a time, but you can move around
the list using the (vertical) scrollbar, or with cursor up/down and the
like.
.PP
If you find the selector window to be too small vertically, and would
like to see more files at once, you can start xzgv fullscreen by using
the \fI-f\fR option (see \fBOptions\fR), and/or use `thin rows'
mode (see \fBFile Selector Options\fR).
.PP
If you find the selector too small (or too big) horizontally, you can
change this by moving the splitter line's `handle' (a small square
button between the selector and viewer, near the bottom of the window),
which changes the relative sizes of the selector and viewer. You can
move it by dragging it with the mouse, or with these keys:
.PP
`\fB[\fR'
.RS
Move the window split left.
.PP
.RE
`\fBCtrl-[\fR'
.RS
Move the window split left more slowly.
.PP
.RE
`\fB]\fR'
.RS
Move the window split right.
.PP
.RE
`\fBCtrl-]\fR'
.RS
Move the window split right more slowly.
.PP
.RE
`\fB~\fR'
.RS
Reset the window split to its default position.
.RE
.PP
You can also set the initial/default size of the selector --- in effect,
the position of the window split --- using `\fB--selector-width\fR'
(see \fBOptions\fR) or the config file option `\fBselector-width\fR'.
.PP
.SH "MOVING AROUND THE LIST"
This section is mainly for those of us more inclined to the keyboard
side of the force. :-) Mouse-happy types can freely skip it.
.PP
When the selector has the keyboard focus, the cursor (or in GTK+ jargon,
the `focus row') is normally shown as a hollow box around one of the
list's rows. This serves the following functions:
.PP
\fB-\fR 
It selects a file for view commands to operate on.
.PP
\fB-\fR 
It determines which part of the list is shown, as the part of the list
shown onscreen always contains the cursor (unless you move around using
the mouse).
.RE
.PP
There are several commands for moving the cursor. In summary, most
`special' keys like the cursors do what you'd imagine they do, but in
more detail:
.PP
`\fBCursor Up\fR'
.RS
.RE
`\fBk\fR'
.RS
Move up.
.PP
.RE
`\fBCursor Down\fR'
.RS
.RE
`\fBj\fR'
.RS
Move down.
.PP
.RE
`\fBPage Up\fR'
.RS
.RE
`\fBCtrl-u\fR'
.RS
Move the cursor back roughly a page.
.PP
.RE
`\fBPage Down\fR'
.RS
.RE
`\fBCtrl-v\fR'
.RS
Move the cursor forward roughly a page.
.PP
.RE
`\fBCtrl-Home\fR'
.RS
.RE
`\fBCtrl-a\fR'
.RS
Move the cursor to the start of the list.
.PP
.RE
`\fBCtrl-End\fR'
.RS
.RE
`\fBCtrl-e\fR'
.RS
Move the cursor to the end of the list.
.PP
.RE
`\fBg\fR'
.RS
.RE
`\fB'\fR'
.RS
Move the cursor to the first filename starting with the next key
pressed, which would generally be a letter or number. Case is
significant; `\fBa\fR' and `\fBA\fR' are different. If no key is pressed
within 2 seconds, the command is cancelled.
.PP
If no files start with the specified character, it moves to the first
file which starts with a later char (in asciibetical order). If there
are none for which this is the case, it moves to the last file ---
unless there are no files (just directories), in which case it has no
effect.
.PP
.RE
.PP
.SH "VIEWING A FILE"
To view a file from the selector, you can click on it, or press
`\fBEnter\fR' or `\fBSpace\fR' after moving the cursor to the relevant file,
or right-click on the file and choose `File' then `Open'.
.PP
`\fBEnter\fR'
.RS
.RE
`\fBSpace\fR'
.RS
.RE
`\fBLeft-click-on-file\fR'
.RS
.RE
`\fBSelector menu, File, Open\fR'
.RS
View the chosen picture file, or if a subdirectory is chosen, make that
the current directory.
.RE
.PP
.SH "DIALOG BOXES"
See \fBThe Viewer\fR, for details of how the viewer works.
If xzgv has a serious problem reading a file, it will give an error.
Errors are shown in dialogs which appear in the middle of the screen ---
they stay there until you click \fIOk\fR (or press `\fBEnter\fR' or
`\fBEsc\fR').
.PP
xzgv also uses similar dialog boxes for other things:
.PP
\fB-\fR 
Getting confirmation that you want to do something. `\fBEnter\fR' or
`\fBy\fR' picks `yes'; `\fBEsc\fR' or `\fBn\fR' picks no. (Again, you can
click on the relevant button with the mouse to do the same.)
.PP
\fB-\fR 
Showing progress when updating a thumbnail. This is a slightly unusual
dialog, in that it automatically disappears when the update is complete.
However, it does provide a \fICancel\fR button which you can click to
abort the update (pressing `\fBEnter\fR' or `\fBEsc\fR' does the same).
.PP
\fB-\fR 
Reading a directory name. Here you should type the directory name then
click \fIOk\fR (or press `\fBEnter\fR'), or click \fICancel\fR (or press
`\fBEsc\fR') to abort. The text-input `widget' used allows a certain
amount of editing, including these keys:
.PP
`\fBCursor Left\fR'
.RS
.RE
`\fBCtrl-b\fR'
.RS
Move the cursor left. (A vertical bar shows the cursor position.)
.PP
.RE
`\fBCursor Right\fR'
.RS
.RE
`\fBCtrl-f\fR'
.RS
Move the cursor right.
.PP
.RE
`\fBHome\fR'
.RS
.RE
`\fBCtrl-a\fR'
.RS
Move the cursor to the start of the line.
.PP
.RE
`\fBEnd\fR'
.RS
.RE
`\fBCtrl-e\fR'
.RS
Move the cursor to the end of the line.
.PP
.RE
`\fBBackspace\fR'
.RS
.RE
`\fBCtrl-h\fR'
.RS
Delete char to the left of the cursor. (Note that `\fBBackspace\fR' is
(usually) the key above the main `\fBEnter\fR' key; it is often labelled
simply as an arrow.)
.PP
.RE
`\fBDelete\fR'
.RS
.RE
`\fBCtrl-d\fR'
.RS
Delete the char the cursor is on.
.RE
.PP
You can also set the X selection (by selecting text with the mouse, or
holding `\fBShift\fR' while moving the cursor) to allow pasting text into
other programs, and you can cut/copy/paste text in the usual ways:
.PP
`\fBShift-Delete\fR'
.RS
.RE
`\fBCtrl-x\fR'
.RS
Cut text.
.PP
.RE
`\fBCtrl-Insert\fR'
.RS
.RE
`\fBCtrl-c\fR'
.RS
Copy text.
.PP
.RE
`\fBShift-Insert\fR'
.RS
.RE
`\fBCtrl-v\fR'
.RS
Paste text.
.RE
.PP
You can paste text from (some) other programs using the latter command,
too.
.RE
.PP
.SH "CLOSING A FILE"
Usually, when you view a file, the viewer subwindow keeps displaying it
until you view a different file. However, if you `close' the file, the
viewer stops displaying the file and returns to its initial state.
.PP
`\fBCtrl-w\fR'
.RS
.RE
`\fBSelector menu, File, Close\fR'
.RS
`Close' the currently-viewed file, clearing the viewer subwindow.
.RE
.PP
.SH "FILE DETAILS"
The listing the selector gives for a file is pretty sparse --- just the
filename and (if the file has one) the accompanying thumbnail. While
this does keep things simple, you sometimes want to know how much space
a file takes up, when it was last modified, the dimensions of the image,
that kind of thing. So, you can show details of a single file using the
`file details' command:
.PP
`\fB:\fR'
.RS
.RE
`\fB;\fR'
.RS
.RE
`\fBSelector menu, File, Details\fR'
.RS
Show various details about the file pointed to by the keyboard cursor.
See \fBThe Selector Menu\fR, for how to choose the file details are given
for when using the mouse. (Basically, you right-click on the file when
popping up the menu.)
.RE
.PP
Most of the details shown come from the OS (by using the `\fBstat(2)\fR'
system call), and should always be available unless you have limited
permissions for the directory the file is in. The file dimensions
(width/height), however, come from the file's thumbnail. If it doesn't
have one, or if it's unreadable, or if it has one and it's readable but
it doesn't mention the original image's width/height, then the
\fIDetails from thumbnail\fR area is greyed out.
.PP
(In explanation of the latter point --- pre-5.0 versions of zgv did not
generate width/height comments in thumbnails, so zgv users in particular
may find the width/height details missing. (xzgv has always been ok,
though, it's just zgv which had this problem.) Worse yet, versions 5.0
and 5.1 generated them with incorrect sizes for most JPEGs. To fix
either problem for a given directory, do `\fBrm -fr .xvpics\fR' in that
dir from a shell prompt and recreate the thumbnails with zgv 5.2 or
later, or xzgv/xv/Gimp.)
.PP
.SH "TAGGING"
The file selector is not restricted to working on one file at a time.
You can `tag' as many (or as few) files as you wish, and certain
commands described in this section will act on them.
.PP
Initially, all files are untagged, and the filenames usually appear in
black (though this depends on the GTK+ theme you're using). Tagged files
appear in red.
.PP
.SS "Tag and Untag Commands"
There are several ways to tag or untag files. The keyboard-based ones
which work on individual files (also available on the \fITagging\fR
menu) move the cursor down one row afterwards, to make tagging or
untagging multiple files easier.
.PP
To tag or untag a single file with the mouse, control-click (i.e. hold
down the control key and click) on the relevant filename or thumbnail in
the selector. It's true that you could use \fITag\fR and/or
\fIUntag\fR on the \fITagging\fR menu (see \fBThe Selector Menu\fR, for
how to choose the file tagged/untagged when doing it this way), but this
is usually much less convenient than using control-click. (The menu
entries for those are really just for completeness.)
.PP
There is also a command available in the viewer to tag the
currently-viewed file. See \fBChanging Picture\fR, for details.
.PP
`\fB=\fR'
.RS
.RE
`\fB+\fR'
.RS
.RE
`\fBKeypad +\fR'
.RS
.RE
`\fB0\fR'
.RS
.RE
`\fBSelector menu, Tagging, Tag\fR'
.RS
Tag file.
.PP
.RE
`\fB-\fR'
.RS
.RE
`\fBKeypad -\fR'
.RS
.RE
`\fB9\fR'
.RS
.RE
`\fBSelector menu, Tagging, Untag\fR'
.RS
Untag file.
.PP
.RE
`\fBAlt =\fR'
.RS
.RE
`\fBAlt-Keypad +\fR'
.RS
.RE
`\fBAlt-0\fR'
.RS
.RE
`\fBSelector menu, Tagging, Tag All\fR'
.RS
Tag all files.
.PP
.RE
`\fBAlt -\fR'
.RS
.RE
`\fBAlt-Keypad -\fR'
.RS
.RE
`\fBAlt-9\fR'
.RS
.RE
`\fBSelector menu, Tagging, Untag All\fR'
.RS
Untag all files.
.PP
.RE
`\fBAlt-o\fR'
.RS
.RE
`\fBSelector menu, Tagging, Toggle All\fR'
.RS
Toggle all tags. This inverts the tagged state, so that all previously
tagged files become untagged, and all previously untagged files become
tagged.
.RE
.PP
Currently there is no way to toggle a (single) file's tag state from the
keyboard.
.PP
.SS "Moving Between Tagged Files"
These commands let you search for (move to) the next or previous tagged
file (if any). Note that `next' and `previous' here are relative to the
keyboard cursor's position; if you use these from the menu, be careful
to right-click on the file you want to start the search from.
.PP
`\fB/\fR'
.RS
.RE
`\fBSelector menu, Tagging, Next Tagged\fR'
.RS
Move to next tagged file in dir.
.PP
.RE
`\fB?\fR'
.RS
.RE
`\fBSelector menu, Tagging, Previous Tagged\fR'
.RS
Move to previous tagged file in dir.
.PP
.RE
.PP
Equivalent commands are also available in the viewer (see \fBChanging
Picture\fR).
.PP
.SS "Copying/Moving Files"
You can copy or move tagged files to a directory you specify. If no
files are tagged, xzgv copies/moves the file the cursor is currently on
--- unless the cursor is on a subdirectory, in which case it gives an
error.
.PP
`\fBC (Shift-c)\fR'
.RS
.RE
`\fBSelector menu, File, Copy\fR'
.RS
Copy tagged files (or the current file) to a given directory. xzgv asks
for the destination directory using a dialog (see \fBDialog Boxes\fR) and
copies the files there. If it comes to copy a file but there is an
existing file in the dir with the same name, the file is not copied and
nor are any of the remaining files.
.PP
.RE
`\fBM (Shift-m)\fR'
.RS
.RE
`\fBSelector menu, File, Move\fR'
.RS
Move tagged files (or the current file) similarly.
.RE
.PP
.SH "RENAMING A FILE"
As well as copying/moving files, you can rename them:
.PP
`\fBCtrl-n\fR'
.RS
.RE
`\fBSelector menu, File, Rename file\fR'
.RS
Rename the current file or directory --- xzgv will refuse to overwrite
any existing files/directories. The new name must remain in the current
directory. (See \fBCopying/Moving Files\fR, for how to move a file to a
different directory (albeit keeping the same name).) See \fBThe Selector
Menu\fR, for how to choose the file renamed when using the mouse.
(Basically, you right-click on the file when popping up the menu.)
.RE
.PP
I know `\fBCtrl-n\fR' isn't the most mnemonic keypress possible for
`rename', but all the good ones were taken. :-/
.PP
.SH "DELETING A FILE"
Deleting a file is pretty straightforward:
.PP
`\fBCtrl-d\fR'
.RS
.RE
`\fBSelector menu, File, Delete file\fR'
.RS
Delete the file pointed to by the keyboard cursor (and any accompanying
thumbnail). See \fBThe Selector Menu\fR, for how to choose the file deleted
when using the mouse. (Basically, you right-click on the file when
popping up the menu.)
.RE
.PP
Note that only one file is deleted (hence `Delete file'); there is
currently no way to delete all tagged files.
.PP
.SH "CHANGING DIRECTORY"
The easiest way to change the current directory in xzgv is usually to
click on a directory entry in the file list (or move the cursor to it
and press `\fBEnter\fR' or `\fBSpace\fR'). Selecting the `\fB..\fR' entry
moves to the parent directory of the current one.
.PP
There is an alternative though:
.PP
(Note that the key for this command is shift-`\fBg\fR', not `\fBg\fR'.)
.PP
`\fBG\fR'
.RS
.RE
`\fBSelector menu, Directory, Change\fR'
.RS
Go to a specified directory. xzgv asks for the destination directory
using a dialog box which you should type the dir's name into
(see \fBDialog Boxes\fR), and moves to that directory if it exists.
.PP
.RE
.PP
.SH "RESCANNING THE DIRECTORY"
Normally, xzgv reads a directory once (on starting up, or when a new
directory is selected). So if the contents of the directory are changed
by another program, this is not automatically reflected. You can,
however, explicitly tell xzgv to `rescan' the directory (reread the
contents), which will update xzgv's notion of what's in it:
.PP
`\fBCtrl-r\fR'
.RS
.RE
`\fBSelector menu, Directory, Rescan\fR'
.RS
Rescan the current directory.
.RE
.PP
.SH "CHANGING THE SORTING ORDER"
Normally, the files are listed in asciibetical order by name. However,
you can instead have the file list sorted by size, last-modified
date/time, or by `extension' (the file type).
.PP
(Only the order of files can be altered; directories are always listed
first, and always in name order.)
.PP
`\fBAlt-n\fR'
.RS
.RE
`\fBSelector menu, Directory, Sort by Name\fR'
.RS
Sort by name. This is the default.
.PP
.RE
`\fBAlt-e\fR'
.RS
.RE
`\fBSelector menu, Directory, Sort by Extension\fR'
.RS
Sort by extension.
.PP
.RE
`\fBAlt-s\fR'
.RS
.RE
`\fBSelector menu, Directory, Sort by Size\fR'
.RS
Sort by size. The biggest files are listed last.
.PP
.RE
`\fBAlt-d\fR'
.RS
.RE
`\fBSelector menu, Directory, Sort by Time & Date\fR'
.RS
Sort by time/date. The newest files are listed last.
.PP
.RE
.PP
You can set the default sort order via the command-line (see \fBInvoking
xzgv\fR) or a config file (see \fBConfiguring xzgv\fR).
.PP
There are three possible timestamps you can use for the `Time & Date'
sorting order:
.PP
`\fBAlt-Shift-m\fR'
.RS
.RE
`\fBSelector menu, Directory, Time & Date Type, Modification Time (mtime)\fR'
.RS
Use the last-modified time (`mtime'). This is the default.
.PP
.RE
`\fBAlt-Shift-c\fR'
.RS
.RE
`\fBSelector menu, Directory, Time & Date Type, Attribute Change Time (ctime)\fR'
.RS
Use the last-attribute-change time (`ctime'). Note that this is
\fInot\fR always the time the file was created, which it's sometimes
mistaken for; for example, moving a file with `\fBmv\fR' will usually
change the ctime.
.PP
.RE
`\fBAlt-Shift-a\fR'
.RS
.RE
`\fBSelector menu, Directory, Time & Date Type, Access Time (atime)\fR'
.RS
Use the last-accessed time (`mtime'). The selector order is not
automatically updated when xzgv reads files, since this would probably
be annoying; do a manual rescan if need be.
.PP
.RE
.PP
.SH "FILE SELECTOR OPTIONS"
Various aspects of the file selector's behaviour can be configured while
xzgv is running, by using these toggle commands (which enable the feature
if it was previously disabled, and vice versa).
.PP
These settings can also be altered using command-line options
(see \fBOptions\fR) and/or config file settings (see \fBConfiguring
xzgv\fR).
.PP
`\fBAlt-a\fR'
.RS
.RE
`\fBSelector menu, Options, Auto Hide\fR'
.RS
Toggle the auto-hiding of the selector when a picture is viewed (off by
default). This is handy for small screens/windows, or for old-time zgv
users who just dig that groovy modal interface, er, man. :-)
.PP
.RE
`\fBAlt-b\fR'
.RS
.RE
`\fBSelector menu, Options, Status Bar\fR'
.RS
Toggle status bar at the bottom of the selector (off by default). This
displays messages in certain circumstances --- normally, it just says
when a picture is being read.
.PP
.RE
`\fBSelector menu, Options, Thumbnail Msgs\fR'
.RS
Toggle reading-thumbnails messages (default is off), only visible if the
status bar is enabled. These messages make it clear when all thumbnails
have been read, but having something flash up every time you change
directory is generally just annoying.
.PP
.RE
`\fBv\fR'
.RS
.RE
`\fBSelector menu, Options, Thin Rows\fR'
.RS
Toggle `thin rows' mode (off by default), in which thumbnails are shown
at a third their normal size so that many more files can be shown at
once. (The odd keyboard shortcut for this is inherited from zgv's
`visual' mode toggle, which had a roughly similar effect.)
.RE
.PP
.SH "THE VIEWER"
Once you've selected a file to view, it's shown in the viewer (the
right-hand part of xzgv's window). This section describes what you can
do while viewing the picture.
.PP
Like the selector, the viewer has its own menu --- right-click anywhere
on the viewer (or press `\fBF10\fR' or `\fBMenu\fR') to show it --- and a
similar help menu (see \fBThe Selector Menu\fR).
.PP
.SH "EXITING THE VIEWER"
When using the mouse to control xzgv, it doesn't matter whether the
selector or the viewer has keyboard focus --- mouse operations transcend
such petty boundaries. :-) But keyboard control is (of necessity)
effectively modal, and so you need to `exit' the viewer in order to have
keyboard control over the selector again. You also need to exit the
viewer if you've enabled auto-hide mode.
.PP
Exiting the viewer is simple:
.PP
`\fBEsc\fR'
.RS
.RE
`\fBTab\fR'
.RS
.RE
`\fBViewer menu, Exit to Selector\fR'
.RS
Exit the viewer. This also returns the selector to its former size, if
it was previously `hidden'.
.RE
.PP
Another way of exiting the viewer is to middle-click on it, but this
mouse-only approach is really only of use when the selector is `hidden'.
.PP
.SH "BIG PICTURES"
A picture may well be too large to fit entirely in the viewer window.
There are two main things which can help you see more of the picture at
once:
.PP
\fB-\fR 
Make the xzgv window larger. You could `maximize' it with your window
manager, or you could start xzgv with a larger window using
`\fB--geometry\fR' or fullscreen mode (see \fBOptions\fR). The
fullscreen mode gives xzgv the maximum window size possible, but needs
co-operation from your window manager (and alas, many are not as willing
as one might like) --- in some cases you may even find `\fB--geometry
100%x100%\fR' to be more effective.
.PP
\fB-\fR 
Hide the selector. To do this, either use auto-hide mode (see \fBFile
Selector Options\fR), or hide the selector explicitly (see \fBHiding the
Selector\fR).
.RE
.PP
But of course, these are only partial solutions to the problem; there
will inevitably always be pictures larger than your screen can show at
once. In general, then, there are two ways to see the whole of the
picture.
.PP
.SS "Scrolling"
Scrolling is the default approach to handling big pictures in xzgv. When
the viewer is started up, the top-left of the picture is shown --- you
can either drag the picture around with the mouse (i.e. click and hold
the button down, then move the mouse around), or use the scrollbars, or
use the cursor keys (and others) to move around the rest of the picture:
.PP
`\fBCursor Up\fR'
.RS
.RE
`\fBK\fR'
.RS
Move up 100 pixels. `\fBCtrl-Cursor Up\fR' and `\fBk\fR' both move up 10
pixels.
.PP
.RE
`\fBCursor Down\fR'
.RS
.RE
`\fBJ\fR'
.RS
Move down 100 pixels. `\fBCtrl-Cursor Down\fR' and `\fBj\fR' both move down
10 pixels.
.PP
.RE
`\fBCursor Left\fR'
.RS
.RE
`\fBH\fR'
.RS
Move left 100 pixels. `\fBCtrl-Cursor Left\fR' and `\fBh\fR' both move left
10 pixels.
.PP
.RE
`\fBCursor Right\fR'
.RS
.RE
`\fBL\fR'
.RS
Move right 100 pixels. `\fBCtrl-Cursor Right\fR' and `\fBl\fR' both move
right 10 pixels.
.PP
.RE
`\fBPage Up\fR'
.RS
.RE
`\fBShift-Cursor Up\fR'
.RS
.RE
`\fBCtrl-u\fR'
.RS
Move up (nearly) the window height. (It moves by 90% of the height.)
.PP
.RE
`\fBPage Down\fR'
.RS
.RE
`\fBShift-Cursor Down\fR'
.RS
.RE
`\fBCtrl-v\fR'
.RS
Move down (nearly) the window height.
.PP
.RE
`\fB-\fR'
.RS
.RE
`\fBShift-Cursor Left\fR'
.RS
Move left (nearly) a window-length. (It moves by 90% of it.)
.PP
.RE
`\fB=\fR'
.RS
.RE
`\fBShift-Cursor Right\fR'
.RS
Move right (nearly) a window-length.
.PP
.RE
`\fBHome\fR'
.RS
.RE
`\fBCtrl-a\fR'
.RS
Move to the top-left of the picture.
.PP
.RE
`\fBEnd\fR'
.RS
.RE
`\fBCtrl-e\fR'
.RS
Move to the bottom-right of the picture.
.RE
.PP
.SS "Zoom Mode"
An alternative way of viewing the whole picture, one which lets you see
the picture onscreen all at once no matter how big (or small) it is, is
zoom mode.
.PP
Zoom mode's name derives from the idea of `zooming' a small file up to
fit the window. But in reality, it is more often used to reduce a large
file to fit.
.PP
Zoom mode is not the default, and has to be enabled. Once enabled, it
stays on until you turn it off again (or until you enable scaling, or
select \fINormal\fR (see \fBScaling\fR)).
.PP
`\fBz\fR'
.RS
.RE
`\fBViewer menu, Options, Zoom (fit to window)\fR'
.RS
Toggle zoom mode.
.PP
.RE
`\fBAlt-r\fR'
.RS
.RE
`\fBViewer menu, Options, When Zooming Reduce Only\fR'
.RS
When in zoom mode, only \fIreduce\fR pictures to fit. This can be
useful when going through a lot of unpredictably-sized pictures, as it
means that you can see all of a big picture easily without also meaning
that tiny little icons assume a scale of Biblical proportions. :-)
.RE
.PP
The way zoom mode reduces a file to fit the window is (relatively) quick
but harsh, and may make the picture look a bit ugly. In future there may
be a smoothing option like zgv's \fIvkludge\fR, but for now I'm afraid
the fairly crude resize is all that's available.
.PP
There is in fact an alternative to zoom mode, as you can scale down an
image instead. This is generally only useful for very large images,
however; zoom mode tends to be the Right Thing for the most part.
.PP
.SH "SCALING"
You can scale a picture --- this makes it appear larger (or smaller)
onscreen. xzgv acts much as if the scaled picture were the real picture;
for example, the cursor keys scroll around in steps of 100 scaled
pixels, even if this means moving a fraction of a pixel (or many pixels)
in the original picture (and similarly for movement with the mouse).
.PP
The main limitation of scaling (other than how much it slows things down
:-), at least when scaling up) is that you can only scale by integer
values, so you can only make each pixel in the image twice as wide/high,
or three times as wide/high, or four times, and so on.
.PP
(It may seem odd saying e.g. `twice as wide/high' rather than `twice the
size', but technically `twice the size' would be referring to scaling up
the width (and height) by about 1.414...)
.PP
Normally, xzgv does no scaling, which could be considered a ratio of 1:1.
Scaling up increases that ratio. How it is increased depends on which
option/key you use:
.PP
`\fBd\fR'
.RS
.RE
`\fBViewer menu, Scaling, Double Scaling\fR'
.RS
Increase the ratio by doubling it --- this leads to ratios of 2:1, 4:1,
8:1...
.PP
.RE
`\fBs\fR'
.RS
.RE
`\fBViewer menu, Scaling, Add 1 to Scaling\fR'
.RS
Increase the ratio by adding one --- leads to ratios of 2:1, 3:1,
4:1...
.RE
.PP
There are similar commands to decrease the ratio:
.PP
`\fBD (Shift-d)\fR'
.RS
.RE
`\fBViewer menu, Scaling, Halve Scaling\fR'
.RS
Decrease the ratio by halving it.
.PP
.RE
`\fBS (Shift-s)\fR'
.RS
.RE
`\fBViewer menu, Scaling, Sub 1 from Scaling\fR'
.RS
Decrease the ratio by subtracting one.
.RE
.PP
Usually the double/halve scalings are more useful.
.PP
Note that you can also double/halve the scaling by using
shift-left-click on the viewer to double, and shift-right-click to
halve. This still changes scale `around' the middle of the window though
(rather than around the point clicked on, as you might expect), which is
a little strange and may possibly be changed in future.
.PP
When you scale `below' 1:1, the above commands lead to ratios of (e.g.)
1:2, 1:4, 1:8, etc. --- that is, the ratios work the same way, but the
other way around. This gives you an increasingly small image.
.PP
The scaling ratio is never decreased below 1:32. It is also never
increased beyond the point where the overall image size would exceed
32767x32767 --- this limit is due to the combination of X's limit on
window sizes, and the implementation used by xzgv for scaling.
.PP
One problem with scaling up, given the way it's currently implemented,
is that it's not well-suited to dithered display --- so if you're
running on an 8-bit server, dragging the image around slowly when using
scaling (especially scaling with interpolation) may result in some
nasty, streaky, undithered-looking parts of the picture. :-(
.PP
You can undo the effect of scaling (up or down) at any time:
.PP
`\fBn\fR'
.RS
.RE
`\fBViewer menu, Scaling, Normal\fR'
.RS
Resume `normal' display --- disables scaling mode, and also zoom mode.
.RE
.PP
Normally, scaling up works by simply making the pixels into larger and
larger squares (in effect), which remain the same colour. However, you
can enable a feature called `interpolation' which smoothly graduates the
colour change between the top-left corners of each pixel. This is
\fIvery\fR slow, but looks nice.
.PP
`\fBi\fR'
.RS
.RE
`\fBViewer menu, Options, Interpolate when Scaling\fR'
.RS
Toggle interpolation in scaling mode.
.RE
.PP
(If you like the appearance of scaling with interpolation, you may also
be interested in a program I wrote called \fIpnminterp\fR, which can
scale up a PGM or PPM file while applying this effect. These days it's
part of the netpbm package.)
.PP
Scaling down, however, is implemented a bit like a special-case zoom
mode, and currently there are no ways of making that look nicer. :-/
.PP
xzgv normally `reverts' scaling (returning the scale to 1:1) back to
normal when you view a new picture. However, it's possible to disable
this behaviour (see \fBViewer Options\fR).
.PP
There is also support for an alternative form of scaling --- decoupled,
or axis-specific, scaling. When you scale in this way, only one axis of
the image is scaled at once. For example, you might choose to
effectively double the height of an image (with the width left
unchanged). Indeed, this sort of scaling is useful for temporarily
correcting pictures intended for display using pixels twice as wide or
high as normal.
.PP
`\fBx\fR'
.RS
.RE
`\fBViewer menu, Scaling, X Only, Double Scaling\fR'
.RS
Increase the (x axis) ratio by doubling it.
.PP
.RE
`\fBX (Shift-x)\fR'
.RS
.RE
`\fBViewer menu, Scaling, X Only, Halve Scaling\fR'
.RS
Decrease the (x axis) ratio by halving it.
.PP
.RE
`\fBAlt-x\fR'
.RS
.RE
`\fBViewer menu, Scaling, X Only, Add 1 to Scaling\fR'
.RS
Increase the (x axis) ratio by adding one.
.PP
.RE
`\fBAlt-Shift-x\fR'
.RS
.RE
`\fBViewer menu, Scaling, X Only, Sub 1 from Scaling\fR'
.RS
Decrease the (x axis) ratio by subtracting one.
.PP
.RE
`\fBy\fR'
.RS
.RE
`\fBViewer menu, Scaling, Y Only, Double Scaling\fR'
.RS
Increase the (y axis) ratio by doubling it.
.PP
.RE
`\fBY (Shift-y)\fR'
.RS
.RE
`\fBViewer menu, Scaling, Y Only, Halve Scaling\fR'
.RS
Decrease the (y axis) ratio by halving it.
.PP
.RE
`\fBAlt-y\fR'
.RS
.RE
`\fBViewer menu, Scaling, Y Only, Add 1 to Scaling\fR'
.RS
Increase the (y axis) ratio by adding one.
.PP
.RE
`\fBAlt-Shift-y\fR'
.RS
.RE
`\fBViewer menu, Scaling, Y Only, Sub 1 from Scaling\fR'
.RS
Decrease the (y axis) ratio by subtracting one.
.RE
.PP
There are also mouse shortcuts for scaling up/down a single axis;
control-left-click scales up, and control-right-click scales down. By
default this acts on the y axis, but the active axis can be toggled with
`\fBAlt-c\fR', or by toggling the `\fBCtl+Click Scales X Axis\fR' option
(see \fBViewer Options\fR).
.PP
Interpolation is not currently supported in situations where the x
scaling does not match the y scaling.
.PP
.SH "MIRROR AND ROTATE"
Sometimes when viewing a picture you will want to flip it horizontally
or vertically, or rotate it:
.PP
`\fBm\fR'
.RS
.RE
`\fBViewer menu, Orientation, Mirror (horiz)\fR'
.RS
`Mirror' the picture (flip it horizontally).
.PP
.RE
`\fBf\fR'
.RS
.RE
`\fBViewer menu, Orientation, Flip (vert)\fR'
.RS
`Flip' the picture (flip it vertically).
.PP
.RE
`\fBr\fR'
.RS
.RE
`\fBViewer menu, Orientation, Rotate Right\fR'
.RS
Rotate the picture 90 degrees clockwise.
.PP
.RE
`\fBR (Shift-r)\fR'
.RS
.RE
`\fBViewer menu, Orientation, Rotate Left\fR'
.RS
Rotate the picture 90 degrees anti-clockwise. (Any US readers surprised
and/or annoyed by my not saying `counter-clockwise' will realise why the
menus say rotate right/left. :-))
.PP
.RE
`\fBN (Shift-n)\fR'
.RS
.RE
`\fBViewer menu, Orientation, Normal\fR'
.RS
Restore the picture orientation to normal. This undoes the effect of any
mirrors, flips, and/or rotations.
.RE
.PP
xzgv normally `reverts' the picture orientation (the way the picture has
been transformed by mirror/flip/rotate) back to normal when you view a
new picture. However, it's possible to disable this (see \fBViewer
Options\fR), so that any new pictures are mirrored, flipped, and/or
rotated in the same way.
.PP
.SH "BRIGHTNESS AND CONTRAST"
xzgv provides support for changing brightness and contrast, though given
the way it has to redraw the image to do so, it can be a little slow.
.PP
Currently there is no way to do this with the mouse; this should be
fixed soon.
.PP
`\fB,\fR'
.RS
Decrease contrast.
.PP
.RE
`\fB.\fR'
.RS
Increase contrast.
.PP
.RE
`\fB<\fR'
.RS
Decrease brightness.
.PP
.RE
`\fB>\fR'
.RS
Increase brightness.
.PP
.RE
`\fB:\fR'
.RS
.RE
`\fB;\fR'
.RS
Reset contrast and brightness to normal. (`\fB*\fR' is also supported, for
hysterical raisins.) Note that this deliberately \fIdoes not\fR affect
the gamma adjustment.
.RE
.PP
Any contrast change is applied before any brightness change, and any
gamma adjustment is applied before both.
.PP
.SH "GAMMA ADJUSTMENT"
Ah yes, gamma. What fun. The basic problem is this --- differing
displays have differing intensity response curves. ``This has made a lot
of people very angry and been widely regarded as a bad move.'' :-)
.PP
It means that you need some way of adjusting how brightly you display
the picture to compensate. But since we're dealing with response curves,
this isn't just a matter of changing the brightness in a linear fashion.
.PP
That doesn't seem so hard to deal with, right? All you need is to get
the gamma (a number which specifies how much the curve bends) for the
image, and for the screen, divide one by the other and adjust as
appropriate. Joy.
.PP
But, given that the problem has existed since we started displaying more
than eight colours, you won't be surprised to find that it's already
been fixed. And the fixes all tend to clash, and everybody has a
different notion of how to fix it. The usual `fix' is to assume that
whoever made the image made it with a gamma matching the gamma of your
display, so you can just stuff the bits right on the screen. Since this
is easy, it's the most widespread approach. But it's a bit stupid, so
not everyone does it. Combine that with the lack of gamma specification
in most image formats, and the often-bogus values specified by people in
those that do, and hey presto --- the image gamma could be just about
anything. And the screen's gamma also tends not to be easily determined.
.PP
So how on earth do you deal with something like \fIthat\fR in a
remotely sane fashion?
.PP
The answer chosen in xzgv is to just live with the fact that the
probability of automatically obtaining correct values for both the
screen and image gamma is basically zero. Once you accept that, the
sensible thing to do is to make it \fIvery\fR easy and fast to change
gamma adjustment to commonly-required values. So here's how to do it:
.PP
`\fB1\fR'
.RS
Set gamma adjustment to 1.0, i.e. no adjustment. This is the default
setting.
.PP
.RE
`\fB2\fR'
.RS
Set gamma adjustment to 2.2. This is useful for viewing linear-gamma
files (one classic example being raytracer output) on an average PC
monitor.
.PP
.RE
`\fB3\fR'
.RS
Set gamma adjustment to 1 divided by 2.2, i.e. roughly 0.45. This is
useful for the reverse --- viewing average-PC-monitor-gamma files on a
linear-gamma display. Historically I believe the classic example would
have been viewing PC files on a Mac, but I don't know how true that is
these days.
.PP
.RE
`\fB4\fR'
.RS
Set gamma adjustment to its initial value, as specified by a
`\fB--gamma\fR' command-line option (see \fBOptions\fR) or equivalent
config file setting (see \fBConfiguring xzgv\fR). The default value used
if none was specified is 1.0.
.RE
.PP
A brief clarification is probably in order. The gamma adjustment value
which you set in xzgv is actually inverted from (i.e. one divided by)
the true adjustment value used. This is (believe it or not :-)) intended
to avoid confusion by reflecting the fact that \fIscreen\fR gamma is
the one most widely considered/well known.
.PP
You can also tweak the adjustment more precisely, in a similar way to
brightness/contrast:
.PP
`\fBAlt-,\fR'
.RS
Decrease gamma adjustment (divide it by 1.05).
.PP
.RE
`\fBAlt-.\fR'
.RS
Increase gamma adjustment (multiply it by 1.05).
.RE
.PP
Note that `\fB:\fR', and the other keys which reset the
brightness/contrast, deliberately avoid resetting the gamma adjustment.
.PP
As with brightness/contrast, there is currently no way to adjust gamma
with the mouse; this should be fixed soon. (But the 1/2/3/4
keyboard-based method is likely to still be the faster method.)
.PP
.SH "CHANGING PICTURE"
It's possible to go directly to the previous or next file (or tagged
file) in the directory, or to tag a file, without having to pick the
file from the file selector by hand. These commands are particularly
useful when using xzgv from the keyboard, but there's also a notable
mouse shortcut for moving to the next image.
.PP
`\fBSpace\fR'
.RS
.RE
`\fBViewer menu, Next Image\fR'
.RS
Move to next file in dir, and view it. You can also click on the
picture/viewer to do this. (If you find this interferes with dragging
the picture around (though it shouldn't), or just don't like it, it can
be disabled (see \fBConfig Variables\fR).)
.PP
.RE
`\fBb\fR'
.RS
.RE
`\fBViewer menu, Previous Image\fR'
.RS
Move to previous file in dir, and view it.
.PP
.RE
`\fBCtrl-Space\fR'
.RS
.RE
`\fBViewer menu, Tagging, Tag then Next\fR'
.RS
Tag current file, then move to next file in dir and view it.
.PP
.RE
`\fB/\fR'
.RS
.RE
`\fBViewer menu, Tagging, Next Tagged\fR'
.RS
Move to next tagged file in dir, and view it.
.PP
.RE
`\fB?\fR'
.RS
.RE
`\fBViewer menu, Tagging, Previous Tagged\fR'
.RS
Move to previous tagged file in dir, and view it.
.PP
.RE
.PP
.SH "HIDING THE SELECTOR"
When running on small screens, or in a small window, it can get a bit
annoying to lose viewer space by having the selector constantly
displayed when you don't actually need it. The usual solution to this
problem is to enable auto-hide mode. But what if some pictures you're
viewing are small and some large? It can sometimes be nearly as annoying
having the selector hidden to `make room for' a small picture which
didn't need it. So for that reason, or perhaps if you just don't like
auto-hide mode :-), you may prefer to leave auto-hide off and explicitly
hide the selector when necessary:
.PP
`\fBZ (shift-z)\fR'
.RS
.RE
`\fBViewer menu, Window, Hide Selector\fR'
.RS
Hide the selector. (This is actually a toggle, of sorts; `hide selector'
when it's already hidden unhides it.)
.RE
.PP
You can also hide or unhide the selector by middle-clicking on the
viewer.
.PP
.SH "MINIMIZING XZGV"
Generally it's easy enough to use your window manager to change windows
etc., but when running fullscreen this can sometimes be a little
problematic. For this reason, xzgv has built-in support for `iconifying'
itself:
.PP
`\fBCtrl-z\fR'
.RS
.RE
`\fBViewer menu, Window, Minimize\fR'
.RS
Minimize the xzgv window.
.RE
.PP
.SH "VIEWER OPTIONS"
As with the selector, various options can be disabled/enabled which
relate to the viewer.
.PP
These settings can also be altered using command-line options
(see \fBOptions\fR) and/or config file settings (see \fBConfiguring
xzgv\fR).
.PP
`\fBz\fR'
.RS
.RE
`\fBViewer menu, Options, Zoom (fit to window)\fR'
.RS
Toggle zoom mode, discussed in more detail elsewhere (see \fBZoom Mode\fR).
.PP
.RE
`\fBAlt-r\fR'
.RS
.RE
`\fBViewer menu, Options, When Zooming Reduce Only\fR'
.RS
Toggle reduce-only in zoom mode, also covered elsewhere (see \fBZoom
Mode\fR).
.PP
.RE
`\fBi\fR'
.RS
.RE
`\fBViewer menu, Options, Interpolate when Scaling\fR'
.RS
Toggle interpolation when a picture is being scaled-up. Again, this has
already been mentioned (see \fBScaling\fR).
.PP
.RE
`\fBAlt-c\fR'
.RS
.RE
`\fBViewer menu, Options, Ctl+Click Scales X Axis\fR'
.RS
Toggle the axis scaled when you control-click (or control-right-click)
on the image. The default is to scale the y axis.
.PP
.RE
`\fBF (shift-f)\fR'
.RS
.RE
`\fBViewer menu, Options, Dither in 15 & 16-bit\fR'
.RS
Toggle dithering in 15/16-bit modes. This increases the apparent colour
depth making gradations look much better, but it's slower than
undithered rendering, and can (in 16-bit) slightly distort a picture's
colour balance. (The `\fBF\fR' key was chosen for this as the dither
toggle is functionally similar to zgv's `fakecols' toggle.)
.PP
.RE
`\fBViewer menu, Options, Revert Scaling For New Pic\fR'
.RS
Normally xzgv returns the scaling back down to 1 (normal) when a new
picture is selected. By disabling this, you can retain scaling across
picture selection. (There is currently no keyboard shortcut for this
fairly-seldom-changed option --- to toggle it from the keyboard, you
should use the popup menu (press `\fBF10\fR'), and select the menu item.)
.PP
.RE
`\fBViewer menu, Options, Revert Orient. For New Pic\fR'
.RS
Similarly, xzgv returns to the picture's true orientation (not mirrored,
rotated, etc.) on selecting a new picture. Disabling this option means
that any mirrors/flips/rotates applied persist across multiple images.
(No keyboard shortcut --- see above.)
.PP
.RE
`\fBViewer menu, Options, Use Exif Orientation\fR'
.RS
Toggle support for Exif orientation. Devices which create JPEG files
in the Exif format (e.g. many digital cameras) may add an orientation
tag to the file, which says how the camera was being held when the
picture was taken. When this tag is present, xzgv can adjust the image
to compensate for a camera being held on its side. (This isn't done by
default as it misrepresents the true image, which could be confusing
if you don't know why it's happening.) Enabling this option may be
useful if you take pictures with your camera on its side, but don't
want to have to rotate the pictures before being able to view them
properly. Of course, for this to work your camera has to be inserting
the orientation tag in the first place --- but it can't hurt to try it
and see. (No keyboard shortcut --- see above.)
.RE
.PP
.SH "FILE FORMATS"
Picture files are stored in a variety of different forms, or `file
formats'. xzgv, via Imlib, supports many.
.PP
.SH "FILE TYPE IDENTIFICATION"
The format a file is in is identified in two different ways. The file
selector picks filenames to display based on the `extension' --- for
instance, if a filename ends in \fI.jpg\fR or \fI.jpeg\fR, xzgv assumes
it is a JPEG. This way of working is not always right, but it's much
faster than the alternative (reading part of every single file) and is
usually sufficient.
.PP
The file-reading code relies on Imlib to determine the file type and
read the file correctly; generally this uses the format's `magic number'
to determine file type --- e.g. a JPEG/JFIF file starts with the (hex)
bytes `\fBFF D8\fR'. So if you start xzgv with \fIxzgv foo\fR, and foo
is in a format supported by Imlib (such as JPEG), the format will be
figured out and the file loaded even though the `extension' is absent.
.PP
One extension to this is xzgv's built-in support for my relatively
obscure `mrf' format. :-) Since there's probably not much interest in
supporting this in Imlib, and it's really quite a simple format, it's
not unreasonable for xzgv to support this directly. But xzgv acts as if
Imlib supported mrf, so this distinction can be largely ignored.
.PP
In fact, xzgv is gradually moving towards reading several of the more
popular formats natively, as part of an attempt to avoid being tied to a
single image rendering/loading backend; at the time of writing, GIF,
JPEG, PNG, and TIFF are also read in this way.
.PP
.SH "SUPPORTED FILE FORMATS"
xzgv supports the following file formats:
.PP
\fBo\fR 
GIF.
.PP
\fBo\fR 
JPEG.
.PP
\fBo\fR 
PNG.
.PP
\fBo\fR 
PBM/PGM/PPM, collectively known as `PNM'. This is a nice simple format
used by pbmplus and netpbm.
.PP
\fBo\fR 
BMP.
.PP
\fBo\fR 
TGA (Targa).
.PP
\fBo\fR 
PCX.
.PP
\fBo\fR 
mrf. Mrf files can be converted to/from PBM with mrftopbm/pbmtomrf, and
the format is documented in the \fImrf(5)\fR man page.
.PP
\fBo\fR 
PRF. PRF is an extension of mrf, similarly converted with
prftopnm/pnmtoprf, and documented in the \fIprf(5)\fR man page.
.PP
\fBo\fR 
XBM (X bitmap files).
.PP
\fBo\fR 
XPM.
.PP
\fBo\fR 
TIFF.
.PP
\fBo\fR 
TIM. This is an image format used (on the Sony PlayStation) by some
games (e.g. Wipeout) for storing 2D images.
.PP
\fBo\fR 
XWD (X window dumps, as produced by xwd).
.PP
.RE
.PP
.SH "CONFIGURING XZGV"
Many aspects of the way xzgv works can be modified by using a
configuration file.
.PP
.SH "CONFIG FILES"
A configuration file lets you alter aspects of xzgv's behaviour. xzgv
supports two possible config files --- a system-wide one,
\fI/etc/xzgv.conf\fR; and one for each user in their home directory,
\fI$HOME/.xzgvrc\fR. Both are optional. If \fI$HOME/.xzgvrc\fR exists,
it is used \fIinstead of\fR \fI/etc/xzgv.conf\fR.
.PP
Before describing the format of config files, it may help to give an
example file:
.PP
# Sample xzgv config file
.br
# Comment lines begin with `#' and are ignored,
.br
#  as are blank lines.
.br
.PP
# make pics fit window
.br
zoom on
.br
# hog the screen :-)
.br
fullscreen on
.br
.PP
It is a line-based format. Each line (or rather, each line which is not
a comment line and is not blank) assigns a value to a single predefined
`variable'. xzgv has many such variables it lets you modify in this way.
For example, the \fIfullscreen\fR option above controls whether or not
xzgv tries to use the whole screen for its window. If it is given the
value `\fBon\fR'/`\fBy\fR'/`\fByes\fR'/`\fB1\fR' it does; if
`\fBoff\fR'/`\fBn\fR'/`\fBno\fR'/`\fB0\fR', it doesn't. Most variables are
of this yes-or-no `boolean' type.
.PP
Since the variables set in a config file have a direct effect on how xzgv
works, it can be easier to simply call them `settings'. Indeed, such
terminology is used on occasion in this documentation.
.PP
.SH "CONFIG VARIABLE TYPES"
There are various types of variable:
.PP
\fB-\fR 
Boolean. These are on-or-off, yes-or-no variables. Most of xzgv's config
file variables are of this type.
.PP
\fB-\fR 
Integer (currently unused). These are whole numbers. The meaning of the
number depends on what the variable is used for.
.PP
\fB-\fR 
Real (floating-point). This can be a whole number or a decimal fraction.
Only the \fIgamma\fR variable is of this type.
.PP
\fB-\fR 
Geometry. This window size-and/or-position specification format is only
used for the `\fBgeometry\fR' setting. See \fBOptions\fR, for a
description of how this type works.
.PP
.RE
.PP
.SH "CONFIG VARIABLES"
Currently, most configuration variables (settings) in xzgv can also be
set by command-line options; indeed, the name of the setting in all such
cases is \fIidentical\fR to that for the long version of the option
(e.g. `\fBfullscreen\fR', `\fBauto-hide\fR'). As such, they're documented
in the section which discusses command-line options and the like
(see \fBOptions\fR).
.PP
However, there are some settings only available in the config file:
.PP
\fIinvert-logo\fR
.RS
If enabled, this causes the logo to appear with its colours inverted.
This tends to look better with dark GTK+ themes. (I may eventually add
an option to remove the logo entirely to avoid problems of this nature,
but for now this is a nice-looking kludge. :-))
.PP
.RE
\fIclick-for-next\fR
.RS
This is enabled by default, allowing you to click on the viewer to skip
to the next image. If disabled, clicking on the viewer does nothing.
.RE
.PP
.SH "RATIONALE"
Here I (RJM) attempt to explain why I did things the way I did. This is
presented in a question-and-answer format of sorts.
.PP
.SH "WHY YET ANOTHER VIEWER?"
Previously, this section concentrated on xv; that may have made sense
when I originally wrote it, and still makes a certain limited amount of
sense for zgv, but for xzgv it was looking increasingly dated. And so
here I am writing an update. :-)
.PP
I originally wrote xzgv as I simply wasn't happy with the viewers for X
that I was aware of at the time (mid-1999). At the time of writing (late
2000), other key things about xzgv are becoming apparent, partly through
responses I've been getting to it:
.PP
\fBo\fR 
It's `fast'. No, it doesn't do any particular operation faster than
other viewers as far as I know (well, maybe thumbnail updates :-));
rather, the interface tries not to get in your way. Click on a filename,
and the picture appears. No multiplicity of toolbars or windows, it's
just there.
.PP
\fBo\fR 
As with zgv, it tries to do one thing well, viewing pictures. It isn't
perfect in this regard, I'll admit, but at least it stays well clear of
picture editing.
.PP
\fBo\fR 
It's, er, quite a lot like zgv. Some of us old fogies like this. :-)
.PP
.RE
.PP
I won't pretend xzgv is The Ultimate Viewer For Everyone. Some people
will prefer other approaches, or just simply prefer other viewers. (Some
people may even still use xv, ghod forbid.) There are a few viewers
which you may like to try if you don't think much of xzgv:
.PP
\fBo\fR 
gqview. This seems to be well-regarded. I find it a bit gimmicky and
kitchen-sink-ish; not quite as `pure' or focused as xzgv, IMHO. I think
more people use it than xzgv though.
.PP
\fBo\fR 
xli. I'm not sure if this is maintained these days, but it's not too bad
a viewer. No thumbnails or file selector though. (These days I mostly
use this for setting the root window pixmap, something I \fIdon't\fR
think belongs in a viewer, but which xli does happen to be quite good
at.)
.PP
\fBo\fR 
qiv. If I read between the lines correctly, this is essentially a modern
replacement for xli.
.PP
\fBo\fR 
gtksee. I've not tried this, but I think the idea is that it's an ACDSee
clone, and there seem to be an awful lot of people who want a clone of
that. Which is their problem. :^)
.PP
\fBo\fR 
Electric Eyes. To be honest, I think this has been outclassed by other
viewers these days, which shows how far we've come.
.PP
.RE
.PP
Ah, you say, what of xv? Well, we've \fIemphatically\fR reached the
point where no-one need use xv any more. Anyone using xv these days
really should drop that pile of ill-conceived non-Free crap and use one
of the better viewers now available. It's that simple.
.PP
.SH "WHY NO IMAGE-EDITING CAPABILITIES?"
It's a fscking \fIviewer\fR, dammit. If you want xv you know where to
find it.
.PP
(OTOH, if you want a \fIdecent\fR image editor, use the Gimp.)
.PP
.SH "WHY A TEXINFO MANUAL?"
For years, I maintained a conventional `man page' for zgv (which xzgv
was loosely based on). But over time, I realised just how impossibly
confusing the zgv man page had become.
.PP
So I wanted to rewrite zgv's documentation in a more sensible way, in
some other format than a man page. I wanted an established,
well-supported format with structure and cross-referencing. I felt this
made it a choice between HTML and texinfo. HTML seemed to me to be a
moving target like no other, and not as well supported on text-only
terminals as Info (and thus texinfo). (This latter point is admittedly
not too relevant as far as xzgv is concerned.) When I noticed that a
converter existed to convert texinfo to HTML in any case, the case was
closed. xzgv's documentation was then based on zgv's --- the
documentation is probably more similar than the programs are. :-)
.PP
Don't get me wrong --- I like man pages. And even with the excellent
Texinfo documentation and Emacs' very helpful Texinfo mode, writing
texinfo is hardly easy. (Without Texinfo mode's node- and menu-update
commands, I personally would find it near-impossible!) But big man pages
just aren't that good for reference, and this is made worse by the
relative lack of structure.
.PP
.SH "WHY ONE-SPACE SENTENCE ENDS?"
The conventional way to write texinfo is to follow each sentence with
two spaces after the dot (or whatever ends the sentence). Many people
normally write this way in a non-texinfo context too. But a sizeable
proportion of people normally write text with only one space after the
dot --- and I'm one of them.
.PP
The Texinfo documentation gives the impression that two-space
\fImust\fR be used; it says ``it is important to put two spaces at the
end of sentences in Texinfo documents.'' But the only circumstance in
which spacing from the texinfo file is preserved at all (in any sense
other than `there is a space here') is when the texinfo is converted to
Info format. So, in fact, the decision to use two-space depends on how
the author wants Info output to appear --- this is a subjective decision
which should be \fIentirely down to the preference of the author\fR,
despite the Texinfo documentation's attempt to make two-space sound like
an objective you-must-do-this kind of thing.
.PP
You might wonder what the problem with using one-space is, then. Well,
`makeinfo' has to reformat paragraphs, and whenever it needs to insert
space at (what appears to it to be) the end of a sentence, it inserts
two spaces. This behaviour cannot be altered, unlike in Emacs
(\fIsentence-end-double-space\fR; see \fBFill Commands\fR in the \fIemacs\fR info file) and GNU fmt (\fI-u\fR; see \fBfmt
invocation\fR in the \fItextutils\fR info file). Also, attempting to `fix'
the output Info with sed doesn't work properly because the `tags' used
to find nodes quickly are then incorrect. These could of course also be
fixed, but this would involve a lot more work than a simple sed
invocation.
.PP
So realistically, anyone who writes texinfo with one-space has to put up
with the occasional two-space sentence end being inserted into their
text --- worse still, the current `makeinfo' formatting algorithm seems
to insert two spaces even after abbreviations (such as `e.g.' and
`etc.'), which breaks even two-space texinfo. (This is particularly
ironic, by the way, since two-space partisans' main argument in favour
of the practice is often the way it makes it possible to tell the
difference between abbreviations and the end of a sentence.)
.PP
One last point may be worth noting; I am not the first person to write
texinfo files using one-space. At the time of writing, it is used in the
texinfo documentation for BFD, gdbm, GTK/GDK, (Linux) IPC, and viper,
and I expect there are instances I'm not aware of.
.PP
.SH "BUGS AND RESTRICTIONS"
All (non-trivial) programs have bugs. Anyone who denies this...
.PP
\fB-\fR 
clearly hasn't written too many programs.
.PP
\fB-\fR 
is wrong. ;-)
.RE
.PP
It follows that xzgv, like everything else, always has some bugs.
Usually these are not too serious, or I'd have fixed them before
releasing xzgv. But either way, bugs and other problems with xzgv are
noted here.
.PP
.SH "KNOWN BUGS"
\fB-\fR 
In zoom mode, it copes with resizing the window as a whole, but
\fIdoesn't\fR when you change the size of the pane (apart from when
hiding/showing selector or resizing from keyboard, but that's only 'cos
I kludged it :-)).
.PP
\fB-\fR 
When scaling up and imlib is dithering, you end up with a crappy-looking
picture if you drag the picture around slowly (since each exposed bit is
dithered independently, with no regard given to matching up to any
previous error-diffusion).
.PP
\fB-\fR 
Scaling up is slow. Not sure if I can do much about this.
.PP
\fB-\fR 
Using an alignment widget to centre the viewer window results in some
annoying `bounce' in certain resizing situations etc.
.PP
\fB-\fR 
Thumbnails don't look so great in palette-based (e.g. 8-bit) modes.
.PP
\fB-\fR 
When dragging an image around, if you quickly move the mouse pointer
over from the image area to the selector area, the image seems to `jump'
a little. I think this may have something to do with the paned window's
window-splitting bit, but I'm not sure. Also, it jumps when moving
across scrollbar sliders and the paned window splitter handle.
.PP
\fB-\fR 
It doesn't apply any tranparency mask returned by imlib. The practical
result of this seems to be purple transparent bits in thumbnails and
scaled-up images, and black transparent bits elsewhere. This doesn't
affect PNG files, though.
.PP
\fB-\fR 
If a GIF file is corrupted in such a way that the decompressed image
has a larger number of pixels in it, the extra pixels will be ignored
and no error or warning will be generated.
.PP
\fB-\fR 
If you look up `joe code' in a dictionary, right next to ``see zgv'' it
now says ``but for \fIreally\fR in-depth insight into the joe code
nature, see xzgv''. :-)
.PP
.RE
.PP
.SH "SUBOPTIMAL FEATURES"
\fB-\fR 
Thumbnails are given an accurate width/height `IMGINFO' comment, but are
always claimed to be "RGB", as Imlib doesn't provide any way to find out
what type they are.
.PP
\fB-\fR 
xzgv should have an option to treat all files as images, since it
currently applies a zgv-like file extension filter. This is a bit
inflexible, given that Imlib supports `all' formats.
.PP
\fB-\fR 
xzgv \fIdoesn't\fR duplicate zgv's behaviour of generating thumbnails
under \fI~/.xvpics/_foo_bar_baz\fR if it can't generate them in
\fI/foo/bar/baz/.xvpics\fR. I doubt anything else supported it, and it
complicated lots of things unnecessarily. This isn't particularly
suboptimal, but as an incompatibility with zgv it merits mention.
.PP
.RE
.PP
.SH "RESTRICTIONS"
\fB-\fR 
GIF89a extension blocks are ignored.
.PP
\fB-\fR 
Only the first image of a multiple-image GIF is used. (These days,
multiple-image GIFs are usually animations.)
.RE
.PP
.SH "REPORTING BUGS"
If you find xzgv does something wrong, which you suspect might be a fault
of some sort (a bug) in the program, it is best to report it as I may
not be aware of the problem. (But first, check it is not a `known bug'.
See \fBKnown Bugs\fR. It is not usually helpful to report a bug I already
know about.)
.PP
It is important to include as much detail in a bug report as you can.
Here are some details you should include:
.PP
\fBo\fR 
The version of xzgv you are running. `\fBxzgv --version\fR' reports this.
.PP
\fBo\fR 
The versions of GTK+ and Imlib you are using. `\fBxzgv --version-gtk\fR'
reports the GTK+ version being used by xzgv, but Imlib is a little more
tricky --- `\fBimlib-config --version\fR' should work if you have a full
Imlib installation, but failing that, try `\fBls -l
/usr/lib/libImlib*\fR' or `\fBls -l /usr/X11R6/lib/libImlib*\fR'.
.PP
\fBo\fR 
The bitdepth your X server is running in (common depths are 8-bit (256
colours), 15-bit, 16-bit, 24-bit, and 32-bit). If you don't know what
depth you're running in, try `\fBxdpyinfo|grep depth\fR'.
.PP
\fBo\fR 
A description of the bug --- what effects it has, the circumstances it
occurs in, and so on. Does it only happen for certain types of file?
Only when in 8-bit modes? Only when dithering is enabled in Imlib? Even
`irrelevant' details can sometimes be useful.
.PP
\fBo\fR 
Finally, if you are a programmer and believe you have managed to fix the
bug yourself, patches are gratefully accepted. :-) You should generate
the patch using `\fBdiff -c\fR' or (preferably) `\fBdiff -u\fR'.
.PP
.RE
.PP
So, if you think you've found a bug in xzgv, report it by emailing me at
<rus@svgalib.org>.
.PP
.SH "REPORTING DOCUMENTATION BUGS"
Bugs in the documentation can sometimes cause as much trouble as bugs in
the program; if you notice a problem in the documentation, it's a good
idea to report it.
.PP
For reports of documentation bugs, you should include these details:
.PP
\fBo\fR 
The version of xzgv the documentation is for.
.PP
\fBo\fR 
If it is a problem in one specific section of the documentation, specify
which part it is (by this I mean the heading it comes under;
texinfophiles should read this as `the node name' :-)).
.PP
\fBo\fR 
The format of the documentation you saw the problem in (e.g. info, man
page, HTML).
.PP
\fBo\fR 
A description of the problem.
.PP
.RE
.PP
.SH "FUTURE CHANGES"
See \fBReporting Bugs\fR, for details of where to send the bug report.
If you want to suggest a feature you'd like in xzgv, or a change to an
existing feature, contact me at <rus@svgalib.org>.
.PP
xzgv is rather a moving target at the moment, so for now future changes
etc. are only listed in the \fITODO\fR file. Normal service will be
resumed once things settle down a bit. :-)
.PP
.SH AUTHOR
Russell Marks <rus@svgalib.org> and others;
see the section \fBACKNOWLEDGEMENTS\fR for details.
.PP
.SH "SEE ALSO"
.BR zgv "(1),"
.BR xv "(1),"
.BR cjpeg "(1), " djpeg "(1),"
.BR pbm "(5), " pgm "(5), " ppm "(5),"
.BR mrf "(5)"
